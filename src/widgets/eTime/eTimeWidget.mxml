<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   xmlns:viewer="com.esri.viewer.*"
                   layout="absolute"
                   widgetConfigLoaded="init()">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.TimeExtent;
            import com.esri.ags.events.LayerEvent;
            import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
            import com.esri.ags.layers.ArcGISImageServiceLayer;
            import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.Layer;
            import com.esri.ags.layers.supportClasses.TimeInfo;
            
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            
            import spark.events.IndexChangeEvent;

            [Bindable] private var sliderLoop:Boolean = false;
            [Bindable] private var sliderSingleThumbAsTimeInstant:Boolean = false;
            [Bindable] private var sliderThumbCount:int = 1;
            [Bindable] private var sliderThumbMovingRate:int = 1000;
			private var beginAtEnd:Boolean;
			private var resetOnLayerChange:Boolean;

            private var timeStopsInterval:Number;
            private var timeStopsUnits:String;
            private var timeStopsCount:Number;

			[Bindable] private var configTimeLayers:Array;
			
			[Bindable] private var timeLayerLbl:String;
			
			[Bindable] public var dateFormat:String;
			
			private var autoToggle:Boolean;
			
			private var oLayerVisArr:Array = [];
            
            private var initComplete:Boolean;
            
            //Build Constants
            protected const VERSION:String = "3.2";
            protected const BUILDDATE:String = "3/29/2013";
            
            //Resources
            [Embed(source="widgets/eTime/assets/images/i_about.png")]
            private var iconClass:Class;

            protected function init():void
            {
                if (configXML){
					configTimeLayers = [];
					beginAtEnd = configXML.startatoldesttime && configXML.startatoldesttime == "true";
					resetOnLayerChange = configXML.resetslideronlayerchange && configXML.resetslideronlayerchange == "true";
					timeLayerLbl = configXML.labels.timelayerlabel;
					
					autoToggle = configXML.autotogglelayervisibility && configXML.autotogglelayervisibility == "true";
					
					var lyrList:XMLList = configXML..layer;
					for (var i:int = 0; i < lyrList.length(); i++){
						var lyrLabel:String = lyrList[i].@label;
						var lyrDateFormat:String = lyrList[i].dateformat;
						var lyrSliderLoop:Boolean = lyrList[i].loop == "true";
						var lyrSliderSingleThumbAsTimeInstant:Boolean = lyrList[i].singlethumbastimeinstant == "true";
						var lyrSliderThumbCount:int = 1;
						var lyrSliderThumbMovingRate:int = 1000;
						if (!isNaN(parseInt(lyrList[i].thumbcount))){
							lyrSliderThumbCount = parseInt(lyrList[i].thumbcount);
						}
						if (!isNaN(parseInt(lyrList[i].thumbmovingrate))){
							lyrSliderThumbMovingRate = parseInt(lyrList[i].thumbmovingrate);
						}
						var lyrTimeStopsInterval:Number = parseFloat(lyrList[i]..timestopsinterval);
						var lyrTimeStopsUnitsConfig:String = lyrList[i]..timestopsunits || "";
						var lyrTimeStopsCount:Number = parseInt(lyrList[i].timestopscount);
						var lyrTimeExtentFromLayer:String = lyrList[i].timeextent.@setfromlayer[0];
						
						var lyrTimeExtentStartTime:Number = Date.parse(lyrList[i].timeextent.starttime);
						var lyrTimeExtentEndTime:Number = Date.parse(lyrList[i].timeextent.endtime);
						var lyrName:String = lyrList[i].@name;
						
						var lyrSliderThumbStart:Number = Number.NaN; 
						var lyrSliderThumbEnd:Number = Number.NaN;
						if(lyrList[i].thumbposition[0]){
							if(lyrList[i].thumbposition.startthumb[0]){
								lyrSliderThumbStart = Date.parse(lyrList[i].thumbposition.startthumb);
							}
							if(lyrList[i].thumbposition.endthumb[0]){
								lyrSliderThumbEnd = Date.parse(lyrList[i].thumbposition.endthumb);
							}
						}
						
						var timeLayer:Object = {
							label: lyrLabel,
							layer: lyrName,
							timeextentfromlayer: lyrTimeExtentFromLayer,
							dateformat: lyrDateFormat,
							sliderloop: lyrSliderLoop,
							singlethumb: lyrSliderSingleThumbAsTimeInstant,
							thumbcount: lyrSliderThumbCount,
							thumbmovingrate: lyrSliderThumbMovingRate,
							timestopinterval: lyrTimeStopsInterval,
							timestopunits: lyrTimeStopsUnitsConfig,
							timestopcount: lyrTimeStopsCount,
							starttime: lyrTimeExtentStartTime,
							endtime: lyrTimeExtentEndTime,
							startthumb: lyrSliderThumbStart,
							endthumb: lyrSliderThumbEnd
						};
						if(map.getLayer(lyrName)){
							configTimeLayers.push(timeLayer);
						}
					}
					
					//Create array with the layers original layer visibilty setting when the widget is opened.
					var l:int;
					for (l = 0; l < configTimeLayers.length; l++){
						if(map.getLayer(configTimeLayers[l].layer)){
							const vis:Boolean = map.getLayer(configTimeLayers[l].layer).visible;
							oLayerVisArr.push(vis);
						}
					}
					
					ddlTimeLayers.selectedIndex = 0;
					
					if (autoToggle && configTimeLayers[0].layer != ""){
						//Toggle off all the time layers first except the first one
						for (l = 0; l < configTimeLayers.length; l++){
							if(configTimeLayers[0].layer != configTimeLayers[l].layer){
								if(map.getLayer(configTimeLayers[l].layer)){
									map.getLayer(configTimeLayers[l].layer).visible = false;
								}
							}
						}
						
						var lay:Layer = map.getLayer(configTimeLayers[0].layer);
						if (lay){
							if (lay.loaded){
								lay.visible = true;
							}else{
								lay.addEventListener(LayerEvent.LOAD, layer_LoadHandler);
								function layer_LoadHandler(event:LayerEvent):void{
									lay.visible = true;
								}
							}
						}
					}
					
					dateFormat = configTimeLayers[0].dateformat;
					if (dateFormat){
						myDateFormatter.formatString = dateFormat;
						timeSlider.setStyle('dateFormat',dateFormat);
					}
                    sliderLoop = configTimeLayers[0].sliderloop;
                    sliderSingleThumbAsTimeInstant = configTimeLayers[0].singlethumb;
                    if (!isNaN(parseInt(configTimeLayers[0].thumbcount))){
                    	sliderThumbCount = parseInt(configTimeLayers[0].thumbcount);
					}
                    if (!isNaN(parseInt(configTimeLayers[0].thumbmovingrate))){
                    	sliderThumbMovingRate = parseInt(configTimeLayers[0].thumbmovingrate);
					}
                    timeStopsInterval = parseFloat(configTimeLayers[0].timestopinterval);
                    var timeStopsUnitsConfig:String = configTimeLayers[0].timestopunits || "";
                    if (timeStopsUnitsConfig){
                        switch (timeStopsUnitsConfig.toLowerCase()){
                            case "years":{
                                timeStopsUnits = TimeInfo.UNIT_YEARS;
                                break;
                            }
                            case "months":{
                                timeStopsUnits = TimeInfo.UNIT_MONTHS;
                                break;
                            }
                            case "days":{
                                timeStopsUnits = TimeInfo.UNIT_DAYS;
                                break;
                            }
                            case "hours":{
                                timeStopsUnits = TimeInfo.UNIT_HOURS;
                                break;
                            }
                            case "minutes":{
                                timeStopsUnits = TimeInfo.UNIT_MINUTES;
                                break;
                            }
                            case "seconds":{
                                timeStopsUnits = TimeInfo.UNIT_SECONDS;
                                break;
                            }
                        }
                    }
                    timeStopsCount = parseInt(configTimeLayers[0].timestopcount);
                    var timeExtentFromLayer:String = configTimeLayers[0].timeextentfromlayer;
                    if (timeExtentFromLayer){
                        var layer:Layer = map.getLayer(timeExtentFromLayer);
                        if (layer){
                            if (layer.loaded){
                                createTimeStopsFromLayer(layer);
                            }else{
                                layer.addEventListener(LayerEvent.LOAD, lLoadHandler);
                                function lLoadHandler(event:LayerEvent):void
                                {
                                    createTimeStopsFromLayer(layer);
                                }
                            }
                        }
                    }else{
                        var startTime:Number = configTimeLayers[0].starttime;
                        var endTime:Number = configTimeLayers[0].endtime;
                        if (!isNaN(startTime) && !isNaN(endTime)){
                            var timeExtent:TimeExtent = new TimeExtent();
                            timeExtent.startTime = new Date(startTime);
                            timeExtent.endTime = new Date(endTime);
                            createTimeStops(timeExtent);
                        }
                    }
					if(beginAtEnd){
						timeSlider.thumbIndexes = [timeSlider.timeStops.length - 1];
					}
					var st:int;
					var et:int;
					if(configTimeLayers[0].thumbcount == 2){
						if(!isNaN(configTimeLayers[0].startthumb) && !isNaN(configTimeLayers[0].endthumb)){
							st = findTimeStopIndex(configTimeLayers[0].startthumb);
							et = findTimeStopIndex(configTimeLayers[0].endthumb);
							if(st > -1 && et > -1){
								timeSlider.thumbIndexes = [st, et];
							}
						}
					}else{
						if(!isNaN(configTimeLayers[0].startthumb)){
							st = findTimeStopIndex(configTimeLayers[0].startthumb);
							if(st > -1){
								timeSlider.thumbIndexes = [st];
							}
						}
					}
                }
                initComplete = true;
                wTemplate.header.addEventListener(MouseEvent.CLICK, DisplayVersion);
            }
            
            private function DisplayVersion(evt:MouseEvent):void
            {
                if(evt.altKey){
                    Alert.show("Enhanched Time Widget Version: " + VERSION + "\nBuild Date: " + BUILDDATE,
                        wTemplate.widgetTitle, 4, null, null, iconClass);
                }
            }
			
			protected function findTimeStopIndex(value:Number):int
			{
				var retIndx:int;
				for(var t:int=0; t<timeSlider.timeStops.length; t++){
					if(Date.parse(timeSlider.timeStops[t]) == value){
						return t;
					}
				}
				return -1;
			}

            protected function widgetClosedHandler(event:Event):void
            {
				//Reset the layers original layer visibilty setting when the widget is closed.
				for (var l:int = 0; l < configTimeLayers.length; l++){
					if(map.getLayer(configTimeLayers[l].layer)){
						map.getLayer(configTimeLayers[l].layer).visible = oLayerVisArr[l];
					}
				}
                timeSlider.pause();
                map.timeSlider = null;
                map.timeExtent = null;
            }

            protected function widgetOpenedHandler(event:Event):void
            {
                map.timeSlider = timeSlider;
                map.timeExtent = timeSlider.timeExtent;
                timeSlider.validateNow();
                if(initComplete){
                    //Toggle off all the time layers first except the selected one
                    for (var l:int = 0; l < configTimeLayers.length; l++){
                        if(ddlTimeLayers.selectedItem.layer != configTimeLayers[l].layer){
                            if(map.getLayer(configTimeLayers[l].layer)){
                                map.getLayer(configTimeLayers[l].layer).visible = false;
                            }
                        }
                    }
                    
                    var lay:Layer = map.getLayer(ddlTimeLayers.selectedItem.layer);
                    if (lay){
                        if (lay.loaded){
                            lay.visible = true;
                        }else{
                            lay.addEventListener(LayerEvent.LOAD, layLoadHandler);
                            function layLoadHandler(event:LayerEvent):void{
                                lay.visible = true;
                            }
                        }
                    }
                }
            }

            protected function createTimeStopsFromLayer(layer:Layer):void
            {
                var timeInfo:TimeInfo;
                if (layer is ArcGISTiledMapServiceLayer){
                    timeInfo = (layer as ArcGISTiledMapServiceLayer).timeInfo;
                }else if (layer is ArcGISDynamicMapServiceLayer){
                    timeInfo = (layer as ArcGISDynamicMapServiceLayer).timeInfo;
                }else if (layer is ArcGISImageServiceLayer){
                    timeInfo = (layer as ArcGISImageServiceLayer).timeInfo;
                }else if (layer is FeatureLayer){
                    var feaLayer:FeatureLayer = layer as FeatureLayer;
                    if (feaLayer.layerDetails){
                    	timeInfo = feaLayer.layerDetails.timeInfo;
					}
                }
                if (timeInfo){
                    if ((isNaN(timeStopsInterval) || !timeStopsUnits) && isNaN(timeStopsCount)){
                        timeStopsInterval = timeInfo.timeInterval;
                        timeStopsUnits = timeInfo.timeIntervalUnits;
                    }
                    createTimeStops(timeInfo.timeExtent);
                }
            }

            protected function createTimeStops(timeExtent:TimeExtent):void
            {
                if (timeExtent){
                    if (!isNaN(timeStopsInterval) && timeStopsUnits){
                        timeSlider.createTimeStopsByTimeInterval(timeExtent, timeStopsInterval, timeStopsUnits);
                    }else{
                        if (isNaN(timeStopsCount)){
                        	timeStopsCount = 10;
						}
                        timeSlider.createTimeStopsByCount(timeExtent, timeStopsCount);
                    }
                }
            }
			
			protected function ddlTimeLayers_changeHandler(event:IndexChangeEvent):void
			{
				var i:int = ddlTimeLayers.selectedIndex;
				
				if (autoToggle && configTimeLayers[i].layer != ""){
					//Toggle off all the time layers first except the selected one
					for (var l:int = 0; l < configTimeLayers.length; l++){
						if(configTimeLayers[i].layer != configTimeLayers[l].layer){
							if(map.getLayer(configTimeLayers[l].layer)){
								map.getLayer(configTimeLayers[l].layer).visible = false;
							}
						}
					}
					
					var lay:Layer = map.getLayer(configTimeLayers[i].layer);
					if (lay){
						if (lay.loaded){
							lay.visible = true;
						}else{
							lay.addEventListener(LayerEvent.LOAD, layLoadHandler);
							function layLoadHandler(event:LayerEvent):void{
								lay.visible = true;
							}
						}
					}
				}
				
				dateFormat = configTimeLayers[i].dateformat;
				if (dateFormat){
					myDateFormatter.formatString = dateFormat;
					timeSlider.setStyle('dateFormat',dateFormat);
				}
				sliderLoop = configTimeLayers[i].sliderloop;
				sliderSingleThumbAsTimeInstant = configTimeLayers[i].singlethumb;
				if (!isNaN(parseInt(configTimeLayers[i].thumbcount))){
					sliderThumbCount = parseInt(configTimeLayers[i].thumbcount);
				}
				if (!isNaN(parseInt(configTimeLayers[i].thumbmovingrate))){
					sliderThumbMovingRate = parseInt(configTimeLayers[i].thumbmovingrate);
				}
				timeStopsInterval = parseFloat(configTimeLayers[i].timestopinterval);
				var timeStopsUnitsConfig:String = configTimeLayers[i].timestopunits || "";
				if (timeStopsUnitsConfig){
					switch (timeStopsUnitsConfig.toLowerCase()){
						case "years":{
							timeStopsUnits = TimeInfo.UNIT_YEARS;
							break;
						}
						case "months":{
							timeStopsUnits = TimeInfo.UNIT_MONTHS;
							break;
						}
						case "days":{
							timeStopsUnits = TimeInfo.UNIT_DAYS;
							break;
						}
						case "hours":{
							timeStopsUnits = TimeInfo.UNIT_HOURS;
							break;
						}
						case "minutes":{
							timeStopsUnits = TimeInfo.UNIT_MINUTES;
							break;
						}
						case "seconds":{
							timeStopsUnits = TimeInfo.UNIT_SECONDS;
							break;
						}
					}
				}
				timeStopsCount = parseInt(configTimeLayers[i].timestopcount);
				var timeExtentFromLayer:String = configTimeLayers[i].timeextentfromlayer;
				if (timeExtentFromLayer){
					var layer:Layer = map.getLayer(timeExtentFromLayer);
					if (layer){
						if (layer.loaded){
							createTimeStopsFromLayer(layer);
						}else{
							layer.addEventListener(LayerEvent.LOAD, layerLoadHandler);
							function layerLoadHandler(event:LayerEvent):void{
								createTimeStopsFromLayer(layer);
							}
						}
					}
				}else{
					var startTime:Number = configTimeLayers[i].starttime;
					var endTime:Number = configTimeLayers[i].endtime;
					if (!isNaN(startTime) && !isNaN(endTime)){
						var timeExtent:TimeExtent = new TimeExtent();
						timeExtent.startTime = new Date(startTime);
						timeExtent.endTime = new Date(endTime);
						createTimeStops(timeExtent);
					}
				}
				if(resetOnLayerChange){
					if(beginAtEnd){
						timeSlider.thumbIndexes = [timeSlider.timeStops.length - 1];
					}else{
						timeSlider.thumbIndexes = [0];
					}
				}else{
					timeSlider.thumbIndexes = [timeSlider.thumbIndexes];
				}
				var st:int;
				var et:int;
				if(configTimeLayers[i].thumbcount == 2){
					if(!isNaN(configTimeLayers[i].startthumb) && !isNaN(configTimeLayers[i].endthumb)){
						st = findTimeStopIndex(configTimeLayers[i].startthumb);
						et = findTimeStopIndex(configTimeLayers[i].endthumb);
						if(st > -1 && et > -1){
							timeSlider.thumbIndexes = [st, et];
						}
					}
				}else{
					if(!isNaN(configTimeLayers[i].startthumb)){
						st = findTimeStopIndex(configTimeLayers[i].startthumb);
						if(st > -1){
							timeSlider.thumbIndexes = [st];
						}
					}
				}
			}
		]]>
    </fx:Script>
    <fx:Declarations>
        <mx:DateFormatter id="myDateFormatter" formatString="MMMM, YYYY"/>
    </fx:Declarations>
    <viewer:WidgetTemplate id="wTemplate"
                           width="335" height="145"
                           closed="widgetClosedHandler(event)"
                           minHeight="145"
                           minWidth="335"
                           open="widgetOpenedHandler(event)">
        <viewer:layout>
            <s:VerticalLayout gap="10"
                              horizontalAlign="center"
                              paddingTop="4"/>
        </viewer:layout>
		<s:HGroup gap="7" width="100%" verticalAlign="middle">
			<s:Label text="{timeLayerLbl}" />
			<s:DropDownList id="ddlTimeLayers" width="100%" dataProvider="{new ArrayCollection(configTimeLayers)}" change="ddlTimeLayers_changeHandler(event)" />
		</s:HGroup>
        <s:Label fontSize="14"
                 horizontalCenter="true"
                 text="{myDateFormatter.format(timeSlider.timeExtent.endTime)}"/>
        <esri:TimeSlider id="timeSlider"
                         width="100%"
                         loop="{sliderLoop}"
                         singleThumbAsTimeInstant="{sliderSingleThumbAsTimeInstant}"
                         thumbCount="{sliderThumbCount}"
                         thumbMovingRate="{sliderThumbMovingRate}"
						 skinClass="widgets.eTime.skins.TimeSliderSkin"/>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>