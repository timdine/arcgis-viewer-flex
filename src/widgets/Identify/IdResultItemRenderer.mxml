<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Developed by Robert Scheitlin
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="false"
				click="itemrenderer_clickHandler(event)"
				mouseOver="itemrenderer_mouseOverHandler(event)"
				mouseOut="itemrenderer_mouseOutHandler(event)"
				minHeight="30"
				toolTip="{zoom2msg}">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			private const ID_RESULT_CLICK:String = "idResultClick";
			private const ID_RESULT_OVER:String = "idResultOver";
			private const ID_RESULT_OUT:String = "idResultOut";
			private const ID_RESULT_DELETE:String = "idResultDelete";
			
			[Bindable] private var zoom2msg:String;
			
			[Bindable] private var removeResult:String;
			
			[Bindable] private var linkicon:String;
			
			[Bindable] private var idResult:IdResult;
			
			override public function set data(value:Object):void{
				super.data = value;
				if (data == null)
					return;

				if (value is IdResult) {
					idResult = IdResult(value);
					
					linkGroup.includeInLayout = linkGroup.visible = false;
					lContent.textFlow = TextConverter.importToFlow(idResult.rsltcontent, TextConverter.TEXT_FIELD_HTML_FORMAT);
					zoom2msg = (idResult.zoom2msg != "")?idResult.zoom2msg:"Click to Zoom to Point";
					removeResult = (idResult.removemsg != "")?idResult.removemsg:"Remove Result";
					linkGroup.removeAllElements();
					for(var l:int = 0; l < idResult.links.length; l++){
						var lImg:Image = new Image();
						lImg.width = lImg.height = 18;
						lImg.mouseEnabled = true;
						lImg.buttonMode = true;
						lImg.useHandCursor = true;
						lImg.source = (idResult.links[l].icon == null) ? "assets/images/w_link.png" : idResult.links[l].icon;
						lImg.addEventListener(MouseEvent.CLICK, showLink);
						lImg.name = idResult.links[l].link;
						if(idResult.links[l].tooltip){
							lImg.toolTip = idResult.links[l].tooltip;
						}
                        //Do not add the icon if the link is empty
                        if(idResult.links[l].link !="" || idResult.links[l].link){
						    linkGroup.addElement(lImg);
                        }
					}
					if(idResult.links[0]){
						if(idResult.links[0].link){
							linkGroup.includeInLayout = linkGroup.visible = true;
						}
					}
				}
			}
			
			private function itemrenderer_mouseOverHandler(event:MouseEvent):void
			{
				if(hitTestPoint(event.stageX,event.stageY, true))
					dispatchEvent(new Event(ID_RESULT_OVER, true)); // bubbles
			}
			
			private function itemrenderer_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(ID_RESULT_CLICK, true)); // bubbles
			}
			
			private function itemrenderer_mouseOutHandler(event:MouseEvent):void
			{
				if(!hitTestPoint(event.stageX,event.stageY, true))
					dispatchEvent(new Event(ID_RESULT_OUT, true)); // bubbles
			}
			
			private function showLink(event:MouseEvent):void
			{
				event.stopImmediatePropagation(); // don't dispatch ID_RESULT_CLICK since we don't want to zoom to feature
				navigateToURL(new URLRequest(event.currentTarget.name));
			}
			
			private function deleteResult(event:MouseEvent):void
			{
				event.stopImmediatePropagation(); // don't let this click event go up to the ItemRenderer
				dispatchEvent(new Event(ID_RESULT_DELETE, true)); // bubbles
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
	</s:states>
	
	<!-- border/background rectangle -->
	<s:Rect bottom="0"
			left="0"
			radiusX="4"
			radiusY="4"
			right="0"
			top="0" id="mainRect">
		<s:stroke>
			<mx:SolidColorStroke alpha="{getStyle('borderAlpha')}"
								 color="{getStyle('borderColor')}"
								 weight="1"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor alpha="0.3"
						   alpha.hovered="0.8"
						   color.hovered="{getStyle('rollOverColor')}"
						   color.normal="{getStyle('contentBackgroundColor')}"/>
		</s:fill>
	</s:Rect>
	<s:HGroup minHeight="30"
			  paddingLeft="5"
			  paddingRight="5"
			  paddingBottom="5"
			  paddingTop="7"
			  verticalAlign="middle"
			  width="100%">
		<s:Image left="5" id="icon"
				  maxHeight="20"
				  maxWidth="20"
				  source="{idResult.icon}">
			<s:filters>
				<s:GlowFilter alpha="0.5"
							   blurX="10"
							   blurY="10"
							   color="#000000"/>
			</s:filters>
		</s:Image>
		<s:VGroup height="100%"
				  verticalAlign="middle"
				  width="100%">
			<s:Label fontWeight="normal"
					 fontWeight.hovered="bold"
					 maxDisplayedLines="1"
					 styleName="RecordText"
					 text="{idResult.title}"
					 width="100%"/>
			<s:RichText id="lContent"
						fontWeight="normal"
						width="100%"/>
			<s:HGroup gap="8" id="linkGroup" height="18" horizontalAlign="center"
					  verticalAlign="middle" paddingRight="25"
					  width="100%" />
		</s:VGroup>
		<s:Image width="20" height="20"
				  right="15" useHandCursor="true" buttonMode="true"
				  click="deleteResult(event)"
				  toolTip="{removeResult}"
				  source="widgets/Identify/assets/images/i_remove_info.png"
				  verticalCenter="0"/>
	</s:HGroup>
</s:ItemRenderer>